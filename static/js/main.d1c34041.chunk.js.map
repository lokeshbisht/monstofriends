{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardsArray.js","Components/SearchBox.js","Components/Scroll.js","Container/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","id","name","email","className","src","alt","height","width","CardsArray","robots","map","user","i","key","toString","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCLSC,EAZF,SAACC,GAAS,IACZC,EAAiBD,EAAjBC,GAAGC,EAAcF,EAAdE,KAAKC,EAASH,EAATG,MACf,OACI,kBAAC,WAAD,KACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,aAAyCK,IAAI,QAAQC,OAAO,QAAQC,MAAM,UAClF,4BAAKN,GACL,2BAAIC,MCeLM,EApBI,SAAC,GAAc,IAAZC,EAAW,EAAXA,OAElB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACA,kBAAC,EAAD,CACIC,IAAOJ,EAAOG,GAAGZ,GAAGc,WACpBd,GAAMS,EAAOG,GAAGZ,GAChBC,KAAQQ,EAAOG,GAAGX,KAClBC,MAASO,EAAOG,GAAGV,aCC5Ba,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aAChC,OACE,yBAAKd,UAAU,OACb,2BACEA,UAAU,mCACVe,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCAHI,G,MARA,SAACtB,GAEZ,OACI,yBAAKuB,MAAQ,CAACC,UAAW,SAAUC,OAAO,kBAAmBlB,OAAO,UAC/DP,EAAM0B,YCyCJC,E,kDAvCX,aAAe,IAAD,8BACV,gBAeJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAfzC,EAAKC,MAAQ,CACbxB,OAAQ,GACRqB,YAAa,IAJH,E,gEASM,IAAD,OACfI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAG,EAAKT,SAAS,CAACpB,OAAQ6B,S,+BAQpC,IAAD,EAC0BC,KAAKN,MAA5BxB,EADH,EACGA,OAAQqB,EADX,EACWA,YACTU,EAAiB/B,EAAOgC,QAAO,SAAAhC,GACjC,OAAOA,EAAOR,KAAKyC,cAAcC,SAASb,EAAYY,kBAEtD,OACI,yBAAKvC,UAAU,MACX,6CACA,kBAAC,EAAD,CAAWc,aAAesB,KAAKZ,iBAC/B,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAYlB,OAAQ+B,U,GA/B1BI,aCAlBC,IAASC,OACP,kBAAC,EAAD,MACCC,SAASC,eAAe,SN2HrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d1c34041.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {Fragment} from 'react';\r\nconst Card = (props)=>{\r\n    const {id,name,email} = props;\r\n    return(\r\n        <Fragment>\r\n            <div className=\"bg-light-green dib br3 ma3 pa3 grow bw2 shadow-5 tc\">\r\n                <img src={`https://robohash.org/${id}?set=set2`} alt='robot' height='200px' width='200px'/>\r\n                <h3>{name}</h3>\r\n                <p>{email}</p>\r\n            </div>\r\n        </Fragment>\r\n    );\r\n}\r\nexport default Card;","import React from 'react';\r\n// import {robots} from './robots';\r\nimport Card from './Card';\r\nconst CardsArray = ({ robots })=>{\r\n    \r\n    return(\r\n        <div>\r\n            {\r\n                robots.map((user,i) => {\r\n                    return (\r\n                    <Card\r\n                        key = {robots[i].id.toString()}\r\n                        id = {robots[i].id}\r\n                        name = {robots[i].name}\r\n                        email = {robots[i].email}\r\n                        />\r\n                    )\r\n                }\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default CardsArray;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search mosters'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;\r\n","import React from 'react'\r\nconst Scroll = (props) =>{\r\n    \r\n    return(\r\n        <div style ={{overflowY: 'scroll', border:'5px black solid', height:'529px'}} >\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default Scroll","import React, { Component } from 'react';\r\nimport CardsArray from '../Components/CardsArray';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n        robots: [],\r\n        searchField: ''\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(response=> response.json())\r\n            .then(users=> this.setState({robots: users}));\r\n    }\r\n\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value})\r\n    }\r\n    \r\n    render(){\r\n        const {robots, searchField} = this.state;\r\n        const filteredRobots = robots.filter(robots =>{\r\n            return robots.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n            return (\r\n                <div className=\"tc\">\r\n                    <h1 >MONSTOFRIENDS</h1>\r\n                    <SearchBox searchChange= {this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <CardsArray robots={filteredRobots} />\r\n                    </Scroll>\r\n                    \r\n                    \r\n                </div>\r\n            );\r\n        }\r\n\r\n    }\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './Container/App';\nReactDOM.render(\n  <App /> \n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}